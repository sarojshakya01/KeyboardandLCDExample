
Keyapad Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000043e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a09  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001cd  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000035c  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000194  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000232  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 92 01 	call	0x324	; 0x324 <main>
  74:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <delay_ms>:
	}
}
void delay_ms(unsigned int n)
{
	unsigned int i;
	for(i=0;i<n;i++)
  7c:	00 97       	sbiw	r24, 0x00	; 0
  7e:	89 f0       	breq	.+34     	; 0xa2 <delay_ms+0x26>
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
	{
		TCNT0=0xF2;
  84:	62 ef       	ldi	r22, 0xF2	; 242
		TCCR0=0x04;
  86:	54 e0       	ldi	r21, 0x04	; 4
		while((TIFR&(0x1<<TOV0))==0);
		TCCR0=0;
		TIFR=0x1<<TOV0;
  88:	41 e0       	ldi	r20, 0x01	; 1
void delay_ms(unsigned int n)
{
	unsigned int i;
	for(i=0;i<n;i++)
	{
		TCNT0=0xF2;
  8a:	62 bf       	out	0x32, r22	; 50
		TCCR0=0x04;
  8c:	53 bf       	out	0x33, r21	; 51
		while((TIFR&(0x1<<TOV0))==0);
  8e:	08 b6       	in	r0, 0x38	; 56
  90:	00 fe       	sbrs	r0, 0
  92:	fd cf       	rjmp	.-6      	; 0x8e <delay_ms+0x12>
		TCCR0=0;
  94:	13 be       	out	0x33, r1	; 51
		TIFR=0x1<<TOV0;
  96:	48 bf       	out	0x38, r20	; 56
	}
}
void delay_ms(unsigned int n)
{
	unsigned int i;
	for(i=0;i<n;i++)
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	28 17       	cp	r18, r24
  9e:	39 07       	cpc	r19, r25
  a0:	a1 f7       	brne	.-24     	; 0x8a <delay_ms+0xe>
  a2:	08 95       	ret

000000a4 <LCD_cmnd>:
		TIFR=0x1<<TOV0;
	}
}//---LCD Code starts from here---//
void LCD_cmnd(unsigned char cmnd) //function to send command to LCD Module
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd & 0xF0); //send upper 4 bit
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	28 2f       	mov	r18, r24
  a8:	20 7f       	andi	r18, 0xF0	; 240
  aa:	9f 70       	andi	r25, 0x0F	; 15
  ac:	92 2b       	or	r25, r18
  ae:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT &= ~(1<<LCD_RS); //0b11111011 //RS = 0
  b0:	da 98       	cbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  b2:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	e7 ec       	ldi	r30, 0xC7	; 199
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_cmnd+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_cmnd+0x1a>
  be:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  c0:	db 98       	cbi	0x1b, 3	; 27
  c2:	ef e1       	ldi	r30, 0x1F	; 31
  c4:	f3 e0       	ldi	r31, 0x03	; 3
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_cmnd+0x22>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCD_cmnd+0x28>
  cc:	00 00       	nop
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmnd << 4); //send lower 4 bit
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	92 2f       	mov	r25, r18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000 //EN = 1
  e0:	db 9a       	sbi	0x1b, 3	; 27
  e2:	87 ec       	ldi	r24, 0xC7	; 199
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_cmnd+0x42>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_cmnd+0x48>
  ec:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111 //EN = 0
  ee:	db 98       	cbi	0x1b, 3	; 27
  f0:	08 95       	ret

000000f2 <LCD_data>:
}
void LCD_data(unsigned char data) //Function to send data to LCD Module
{
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	28 2f       	mov	r18, r24
  f6:	20 7f       	andi	r18, 0xF0	; 240
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	92 2b       	or	r25, r18
  fc:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA_PORT |= 1<<LCD_RS; //0b00000100 //RS = 1
  fe:	da 9a       	sbi	0x1b, 2	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
 100:	db 9a       	sbi	0x1b, 3	; 27
 102:	e7 ec       	ldi	r30, 0xC7	; 199
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_data+0x14>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_data+0x1a>
 10c:	00 00       	nop
	_delay_us(50);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
 10e:	db 98       	cbi	0x1b, 3	; 27
 110:	ef e3       	ldi	r30, 0x3F	; 63
 112:	ff e1       	ldi	r31, 0x1F	; 31
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_data+0x22>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_data+0x28>
 11a:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
 11c:	2b b3       	in	r18, 0x1b	; 27
 11e:	f0 e1       	ldi	r31, 0x10	; 16
 120:	8f 9f       	mul	r24, r31
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
 126:	92 2f       	mov	r25, r18
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	89 2b       	or	r24, r25
 12c:	8b bb       	out	0x1b, r24	; 27
	LCD_DATA_PORT |= 1<<LCD_EN; //0b00001000
 12e:	db 9a       	sbi	0x1b, 3	; 27
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9f e1       	ldi	r25, 0x1F	; 31
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_data+0x42>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_data+0x48>
 13a:	00 00       	nop
	_delay_us(2000);
	LCD_DATA_PORT &= ~(1<<LCD_EN); //0b11110111
 13c:	db 98       	cbi	0x1b, 3	; 27
 13e:	08 95       	ret

00000140 <LCD_initialize>:
}
void LCD_initialize(void) //Function to initialize LCD Module
{
	LCD_DATA_DDR = 0xFC;
 140:	8c ef       	ldi	r24, 0xFC	; 252
 142:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT &= ~(0xC1<<LCD_EN); //0b00110111;
 144:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	83 ec       	ldi	r24, 0xC3	; 195
 14a:	99 e0       	ldi	r25, 0x09	; 9
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <LCD_initialize+0xc>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_initialize+0x16>
 156:	00 00       	nop
	_delay_ms(200);
	LCD_cmnd(0x33);
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_cmnd>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <LCD_initialize+0x24>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_initialize+0x2e>
 16e:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x32);
 170:	82 e3       	ldi	r24, 0x32	; 50
 172:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_cmnd>
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	89 ef       	ldi	r24, 0xF9	; 249
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <LCD_initialize+0x3c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_initialize+0x46>
 186:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x28);
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_cmnd>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	89 ef       	ldi	r24, 0xF9	; 249
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <LCD_initialize+0x54>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_initialize+0x5e>
 19e:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x0E);
 1a0:	8e e0       	ldi	r24, 0x0E	; 14
 1a2:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_cmnd>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <LCD_initialize+0x6c>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_initialize+0x76>
 1b6:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_cmnd>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	89 ef       	ldi	r24, 0xF9	; 249
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <LCD_initialize+0x84>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_initialize+0x8e>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <read_column1>:
	LCD_data(num%10 + 0x30);
}
//---LCD Code ends here---//
void read_column1()
{
	a=KEY_PIN;
 1d2:	83 b3       	in	r24, 0x13	; 19
 1d4:	80 93 60 00 	sts	0x0060, r24
	LCD_data(a);
 1d8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFE;
 1dc:	8e ef       	ldi	r24, 0xFE	; 254
 1de:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xE0)
 1e0:	83 b3       	in	r24, 0x13	; 19
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	80 3e       	cpi	r24, 0xE0	; 224
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <read_column1+0x24>
	{
		delay_ms(20);
 1e8:	84 e1       	ldi	r24, 0x14	; 20
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		LCD_data('1');
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	}
	KEY_PORT=0xFD;
 1f6:	8d ef       	ldi	r24, 0xFD	; 253
 1f8:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xE0)
 1fa:	83 b3       	in	r24, 0x13	; 19
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	80 3e       	cpi	r24, 0xE0	; 224
 200:	39 f4       	brne	.+14     	; 0x210 <read_column1+0x3e>
	{
		delay_ms(20);
 202:	84 e1       	ldi	r24, 0x14	; 20
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		LCD_data('4');
 20a:	84 e3       	ldi	r24, 0x34	; 52
 20c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	}
	KEY_PORT=0xFB;
 210:	8b ef       	ldi	r24, 0xFB	; 251
 212:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xE0)
 214:	83 b3       	in	r24, 0x13	; 19
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	80 3e       	cpi	r24, 0xE0	; 224
 21a:	39 f4       	brne	.+14     	; 0x22a <read_column1+0x58>
	{
		delay_ms(20);
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		LCD_data('7');
 224:	87 e3       	ldi	r24, 0x37	; 55
 226:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	}
	KEY_PORT=0xF7;
 22a:	87 ef       	ldi	r24, 0xF7	; 247
 22c:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xE0)
 22e:	83 b3       	in	r24, 0x13	; 19
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	80 3e       	cpi	r24, 0xE0	; 224
 234:	39 f4       	brne	.+14     	; 0x244 <read_column1+0x72>
	{
		delay_ms(20);
 236:	84 e1       	ldi	r24, 0x14	; 20
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		LCD_data('*');
 23e:	8a e2       	ldi	r24, 0x2A	; 42
 240:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
 244:	08 95       	ret

00000246 <read_column2>:
	}
}
void read_column2()
{
	KEY_PORT=0xFE;
 246:	8e ef       	ldi	r24, 0xFE	; 254
 248:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xD0)
 24a:	83 b3       	in	r24, 0x13	; 19
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	80 3d       	cpi	r24, 0xD0	; 208
 250:	19 f4       	brne	.+6      	; 0x258 <read_column2+0x12>
	LCD_data('2');
 252:	82 e3       	ldi	r24, 0x32	; 50
 254:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFD;
 258:	8d ef       	ldi	r24, 0xFD	; 253
 25a:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xD0)
 25c:	83 b3       	in	r24, 0x13	; 19
 25e:	80 7f       	andi	r24, 0xF0	; 240
 260:	80 3d       	cpi	r24, 0xD0	; 208
 262:	19 f4       	brne	.+6      	; 0x26a <read_column2+0x24>
	LCD_data('5');
 264:	85 e3       	ldi	r24, 0x35	; 53
 266:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFB;
 26a:	8b ef       	ldi	r24, 0xFB	; 251
 26c:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xD0)
 26e:	83 b3       	in	r24, 0x13	; 19
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	80 3d       	cpi	r24, 0xD0	; 208
 274:	19 f4       	brne	.+6      	; 0x27c <read_column2+0x36>
	LCD_data('8');
 276:	88 e3       	ldi	r24, 0x38	; 56
 278:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xF7;
 27c:	87 ef       	ldi	r24, 0xF7	; 247
 27e:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xD0)
 280:	83 b3       	in	r24, 0x13	; 19
 282:	80 7f       	andi	r24, 0xF0	; 240
 284:	80 3d       	cpi	r24, 0xD0	; 208
 286:	19 f4       	brne	.+6      	; 0x28e <read_column2+0x48>
	LCD_data('0');
 288:	80 e3       	ldi	r24, 0x30	; 48
 28a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
 28e:	08 95       	ret

00000290 <read_column3>:
}
void read_column3()
{
	KEY_PORT=0xFE;
 290:	8e ef       	ldi	r24, 0xFE	; 254
 292:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xB0)
 294:	83 b3       	in	r24, 0x13	; 19
 296:	80 7f       	andi	r24, 0xF0	; 240
 298:	80 3b       	cpi	r24, 0xB0	; 176
 29a:	19 f4       	brne	.+6      	; 0x2a2 <read_column3+0x12>
	LCD_data('3');
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFD;
 2a2:	8d ef       	ldi	r24, 0xFD	; 253
 2a4:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xB0)
 2a6:	83 b3       	in	r24, 0x13	; 19
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	80 3b       	cpi	r24, 0xB0	; 176
 2ac:	19 f4       	brne	.+6      	; 0x2b4 <read_column3+0x24>
	LCD_data('6');
 2ae:	86 e3       	ldi	r24, 0x36	; 54
 2b0:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFB;
 2b4:	8b ef       	ldi	r24, 0xFB	; 251
 2b6:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xB0)
 2b8:	83 b3       	in	r24, 0x13	; 19
 2ba:	80 7f       	andi	r24, 0xF0	; 240
 2bc:	80 3b       	cpi	r24, 0xB0	; 176
 2be:	19 f4       	brne	.+6      	; 0x2c6 <read_column3+0x36>
	LCD_data('9');
 2c0:	89 e3       	ldi	r24, 0x39	; 57
 2c2:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xF7;
 2c6:	87 ef       	ldi	r24, 0xF7	; 247
 2c8:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0xB0)
 2ca:	83 b3       	in	r24, 0x13	; 19
 2cc:	80 7f       	andi	r24, 0xF0	; 240
 2ce:	80 3b       	cpi	r24, 0xB0	; 176
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <read_column3+0x48>
	LCD_data('#');
 2d2:	83 e2       	ldi	r24, 0x23	; 35
 2d4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
 2d8:	08 95       	ret

000002da <read_column4>:
}
void read_column4()
{
	KEY_PORT=0xFE;
 2da:	8e ef       	ldi	r24, 0xFE	; 254
 2dc:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0x70)
 2de:	83 b3       	in	r24, 0x13	; 19
 2e0:	80 7f       	andi	r24, 0xF0	; 240
 2e2:	80 37       	cpi	r24, 0x70	; 112
 2e4:	19 f4       	brne	.+6      	; 0x2ec <read_column4+0x12>
	LCD_data('A');
 2e6:	81 e4       	ldi	r24, 0x41	; 65
 2e8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFD;
 2ec:	8d ef       	ldi	r24, 0xFD	; 253
 2ee:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0x70)
 2f0:	83 b3       	in	r24, 0x13	; 19
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	80 37       	cpi	r24, 0x70	; 112
 2f6:	19 f4       	brne	.+6      	; 0x2fe <read_column4+0x24>
	LCD_data('B');
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xFB;
 2fe:	8b ef       	ldi	r24, 0xFB	; 251
 300:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0x70)
 302:	83 b3       	in	r24, 0x13	; 19
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	80 37       	cpi	r24, 0x70	; 112
 308:	19 f4       	brne	.+6      	; 0x310 <read_column4+0x36>
	LCD_data('C');
 30a:	83 e4       	ldi	r24, 0x43	; 67
 30c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
	KEY_PORT=0xF7;
 310:	87 ef       	ldi	r24, 0xF7	; 247
 312:	85 bb       	out	0x15, r24	; 21
	if((KEY_PIN&0xF0)==0x70)
 314:	83 b3       	in	r24, 0x13	; 19
 316:	80 7f       	andi	r24, 0xF0	; 240
 318:	80 37       	cpi	r24, 0x70	; 112
 31a:	19 f4       	brne	.+6      	; 0x322 <read_column4+0x48>
	LCD_data('D');
 31c:	84 e4       	ldi	r24, 0x44	; 68
 31e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_data>
 322:	08 95       	ret

00000324 <main>:
}
int main()
{
	KEY_DDR=0x0F;
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	84 bb       	out	0x14, r24	; 20
	KEY_PORT=0xFF;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	85 bb       	out	0x15, r24	; 21
	LCD_initialize();
 32c:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_initialize>
	while(1)
	{
		KEY_PORT=0xF0;
 330:	c0 ef       	ldi	r28, 0xF0	; 240
 332:	c5 bb       	out	0x15, r28	; 21
		if((KEY_PIN&0xF0)==0xE0)
 334:	83 b3       	in	r24, 0x13	; 19
 336:	80 7f       	andi	r24, 0xF0	; 240
 338:	80 3e       	cpi	r24, 0xE0	; 224
 33a:	51 f4       	brne	.+20     	; 0x350 <main+0x2c>
		{
			delay_ms(20);
 33c:	84 e1       	ldi	r24, 0x14	; 20
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
			read_column1();
 344:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <read_column1>
			delay_ms(200);
 348:	88 ec       	ldi	r24, 0xC8	; 200
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		}
		if((KEY_PIN&0xF0)==0xD0)
 350:	83 b3       	in	r24, 0x13	; 19
 352:	80 7f       	andi	r24, 0xF0	; 240
 354:	80 3d       	cpi	r24, 0xD0	; 208
 356:	51 f4       	brne	.+20     	; 0x36c <main+0x48>
		{
			delay_ms(20);
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
			read_column2();
 360:	0e 94 23 01 	call	0x246	; 0x246 <read_column2>
			delay_ms(200);
 364:	88 ec       	ldi	r24, 0xC8	; 200
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		}
		if((KEY_PIN&0xF0)==0xB0)
 36c:	83 b3       	in	r24, 0x13	; 19
 36e:	80 7f       	andi	r24, 0xF0	; 240
 370:	80 3b       	cpi	r24, 0xB0	; 176
 372:	51 f4       	brne	.+20     	; 0x388 <main+0x64>
		{
			delay_ms(20);
 374:	84 e1       	ldi	r24, 0x14	; 20
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
			read_column3();
 37c:	0e 94 48 01 	call	0x290	; 0x290 <read_column3>
			delay_ms(200);
 380:	88 ec       	ldi	r24, 0xC8	; 200
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
		}
		if((KEY_PIN&0xF0)==0x70)
 388:	83 b3       	in	r24, 0x13	; 19
 38a:	80 7f       	andi	r24, 0xF0	; 240
 38c:	80 37       	cpi	r24, 0x70	; 112
 38e:	89 f6       	brne	.-94     	; 0x332 <main+0xe>
		{
			delay_ms(20);
 390:	84 e1       	ldi	r24, 0x14	; 20
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
			read_column4();
 398:	0e 94 6d 01 	call	0x2da	; 0x2da <read_column4>
			delay_ms(200);
 39c:	88 ec       	ldi	r24, 0xC8	; 200
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 3e 00 	call	0x7c	; 0x7c <delay_ms>
 3a4:	c6 cf       	rjmp	.-116    	; 0x332 <main+0xe>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
